
pragma solidity ^0.5.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.3.0/contracts/math/SafeMath.sol";

 // need to check the exact contract name
contract PropertyOwnership {    
   
    
    //declare address payable for each user owned token
    
    address payable user;
    mapping(address => uint256) public balanceOf;
    
   }
    // vew/return the contract's current balance (received from the renter) - option 1
    
    
    
    //function balance() public view returns(uint) {
    //return address(this).balance;
    
    
    // or another version for simple balance check of
    
    balanceOf(address propertymanagement) → uint256 balance;
    
    // or 
    
    balanceOf(address token_address) → uint256 balance;


    function deposit() public payable {
        
        //  Split 90%  of `rent balance`/msg.value to 100 tokens
        //For example, if rent amount is 400 ETH, 90% will be 360 ETH (400*0.9), then 360 ETH divide by 100 tokens = 3,6 ETH per token. Each user will receive 3,6 ETH per token owned.
        // IF user own 25 token, 25 * 3.6 ETH = 90 ETH 
       
        
        (uint (90) / 100) * msg.value * 100;
        
     
     //Transfer the amount to each user. I didnt address the transfer from renter to propertymanagement since coding for renter is out of the scope for now.
        
        user.transfer(amount); 
       

        // to take care of a potential remainder by sending back to propertymanagement (`msg.sender`)
     
        
        msg.sender.transfer(msg.value - amount * 100);
    }

    function() external payable {
        //Fallback `deposit` function in case the amount wasn't delivered for same reason 
        
        
        deposit();
    }
}